import asyncio
from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup,InlineKeyboardButton,KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import sqlite3
import os
import datetime


def select_bd(query):#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–¥
    sqlite_connection = sqlite3.connect('C:/projects/django_otrs/project/db.sqlite3')
    cursor = sqlite_connection.cursor()
    sqlite_select_query = query
    cursor.execute(sqlite_select_query)
    result = cursor.fetchall()
    sqlite_connection.close()
    return result

def insert_bd(query):#—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±–¥
    sqlite_connection = sqlite3.connect('C:/projects/django_otrs/project/db.sqlite3')
    cursor = sqlite_connection.cursor()
    sqlite_insert_query = query
    count = cursor.execute(sqlite_insert_query)
    sqlite_connection.commit()
    sqlite_connection.close()

system = select_bd("""
        SELECT name from applications_systems;
       """)


class Form(StatesGroup):# —Ñ–æ—Ä–º—ã —Å—Ç–∞—Ç—É—Å–æ–≤
    start = State()#—Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    start_fio = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∏–æ –æ—Ç –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
    start_org = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Ä–≥ –æ—Ç –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
    start_tel = State()# —Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞


    inn_org = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–Ω–Ω
    name_org = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    send_kanal_org = State()#—Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ –≤ –±–¥ –∏ –∫–∞–Ω–∞–ª

    error = State()

    inn_org_sotr = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–Ω–Ω
    fio_sotr = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    dol_sotr = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    send_kanal_sotr = State()  # —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ –≤ –±–¥ –∏ –∫–∞–Ω–∞–ª

    fio_pers = State()#—Å—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∏–æ –ø–µ—Ä—Å–æ–Ω—ã
    send_kanal_pers = State()#—Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ –≤ –±–¥ –∏ –∫–∞–Ω–∞–ª

    system = State()
    text_appl = State()
    send_kanal_appl = State()


load_dotenv()

storage = MemoryStorage()#–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–ª–æ–≤–∞—Ä—å
bot = Bot(os.getenv('TOKEN'))#—Å–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
dp = Dispatcher(bot=bot,storage=storage)#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞




fin = ReplyKeyboardMarkup(resize_keyboard=True)#—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
fin.add('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É')





finish = ReplyKeyboardMarkup(resize_keyboard=True)
finish.add('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')

error = ReplyKeyboardMarkup(resize_keyboard=True)
error.add('–î–∞')

systems = ReplyKeyboardMarkup(resize_keyboard=True)
for s in system:
    systems.add(s[0])



@dp.message_handler(text=['–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'])
@dp.message_handler(text=['–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É'])#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(text=['‚óÄÔ∏è –ù–∞–∑–∞–¥'])#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['start'])#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(state=Form.start)
async def cmd_start(message: types.message,state: FSMContext):
    ip = message.from_user.id#–ø–æ–ª—É—á–µ–Ω–∏—è ip —é–∑–µ—Ä–∞

    await message.answer_sticker('CAACAgIAAxkBAAIFhWTnBvIFxgbG-8HUTmU_3B6ZVRQpAAJlJQACBp4xSHhTYfWaojnOMAQ')#—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∏–∫–µ—Ä–∞
    user = select_bd(f"SELECT first_name,last_name,patronymic FROM applications_applicants where id_user_tel = '{message.from_user.id}' ")#–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —é–∑–µ—Ä–∞
    if len(user)==0:# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ
        await state.update_data(id_appl=message.from_user.id)
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –í—ã –µ—â–µ –Ω–∏ —Ä–∞–∑—É –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é)')
        await state.set_state(Form.start_fio)#–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∏–æ –æ—Ç —é—Ö–µ—Ä–∞
    else:
        await state.finish()
        query = f"""
                SELECT black_list FROM applications_applicants where id_user_tel='{ip}'
            """#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á—Å
        bl = select_bd(query)[0][0]
        if bl == 0:
            await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user[0][1]} {user[0][0]} {user[0][2]}, –≤ –∫–∞–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?',reply_markup = systems)# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —é–∑–µ—Ä—É
        else:
            await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')#–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —é–∑–µ—Ä–∞ —á—Å, –≤—ã—Ö–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ


@dp.message_handler(state=Form.start_fio)#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç—É—Å–∞ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ñ–∏–æ –ø—Ä–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–µ
async def contacts(message:types.Message,state: FSMContext):
    await state.update_data(–§–ò–û_–∑–∞—è–≤–∏—Ç–µ–ª—è = message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –í–∞—à—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é', reply_markup=finish)
    await state.set_state(Form.start_org)

@dp.message_handler(state=Form.start_org)
async def contacts(message:types.Message,state: FSMContext):
    await state.update_data(–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è = message.text)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–∞–±–æ—á–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=finish)

    await state.set_state(Form.start_tel)

@dp.message_handler(state=Form.start_tel)
async def contacts(message:types.Message,state: FSMContext):
    await state.update_data(–¢–µ–ª–µ—Ñ–æ–Ω = message.text)
    await state.set_state(Form.start)
    user_data = await state.get_data()
    fio = user_data['–§–ò–û_–∑–∞—è–≤–∏—Ç–µ–ª—è']
    fio = fio.split(' ')

    while len(fio) < 3:
        fio.append('')
    query = """
        INSERT INTO `applications_applicants` (first_name, last_name, patronymic, phone, org, id_user_tel,black_list) 
        VALUES
        ('{first_name}', '{last_name}','{patronymic}','{phone}','{org}','{id_user_tel}','{black_list}');  
    """.format(first_name = fio[1],last_name = fio[0],patronymic = fio[2],phone = user_data['–¢–µ–ª–µ—Ñ–æ–Ω'], org = user_data['–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è'],id_user_tel = user_data['id_appl'],black_list=0)
    insert_bd(query)
    await message.answer('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É??', reply_markup=finish)

system_except_esed = system.copy()
system_except_esed.pop(0)
@dp.message_handler(text = [s[0] for s in system_except_esed])
async def contacts(message:types.Message,state: FSMContext):
    ip = message.from_user.id  # –ø–æ–ª—É—á–µ–Ω–∏—è ip —é–∑–µ—Ä–∞
    query = f"""
                    SELECT black_list FROM applications_applicants where id_user_tel='{ip}'
                """
    bl = select_bd(query)[0][0]
    if bl == 0:
        query = f"""
                select id from applications_systems where name ='{message.text}'
            """
        await state.update_data(–ò–î_—Å–∏—Å—Ç–µ–º—ã=select_bd(query)[0][0])
        bt = [
        [
            KeyboardButton('‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'),
        ],
        [
            KeyboardButton('üßëüèª‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        ],
        [
            KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
        ]
    ]

        esed = ReplyKeyboardMarkup(keyboard=bt)

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=esed)
    else:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')

@dp.message_handler(text = '–ï–°–≠–î')
async def contacts(message:types.Message,state: FSMContext):
    ip = message.from_user.id
    query = f"""
                        SELECT black_list FROM applications_applicants where id_user_tel='{ip}'
                    """
    bl = select_bd(query)[0][0]
    if bl == 0:
        query = f"""
        select id from applications_systems where name ='{message.text}'
    """

        await state.update_data(–ò–î_—Å–∏—Å—Ç–µ–º—ã=select_bd(query)[0][0])
        bt = [
        [
            KeyboardButton('üè¢ –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'),
            KeyboardButton('üßëüèª‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'),
            KeyboardButton('üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É')
        ],
        [
            KeyboardButton('‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ'),
            KeyboardButton('üßëüèª‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        ],
        [
            KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
        ]
    ]

        esed = ReplyKeyboardMarkup(keyboard=bt)

        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=esed)
    else:
        await message.answer('–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã')

@dp.message_handler(text='‚öôÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ')
async def contacts(message:types.Message,state: FSMContext):
    text = os.getenv('TEXT_1')
    await message.answer(text, reply_markup=finish)

    await message.answer_document(
        'BQACAgIAAxkBAAIQIWTt1omHSgZs1vf_yzIDe00dwwIJAAKANAACS-NxS_NswwybmhxEMAQ')  # —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç


@dp.message_handler(text='üßëüèª‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
async def contacts(message:types.Message,state: FSMContext):
    await message.answer('–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –ø—Ä–∏—á–∏–Ω—É –∑–∞—è–≤–∫–∏', reply_markup=finish)
    await state.set_state(Form.text_appl)

@dp.message_handler(state=Form.text_appl)
async def contacts(message: types.Message, state: FSMContext):
    await state.update_data(–¢–µ–∫—Å—Ç_–ø—Ä–æ–±–ª–µ–º—ã=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=fin)
    await state.set_state(Form.send_kanal_appl)
@dp.message_handler(state=Form.send_kanal_appl)
async def contacts(message: types.Message, state: FSMContext):
    id_user_tel = message.from_user.id
    user_data = await state.get_data()
    query = f"""
    SELECT id from applications_applicants where id_user_tel = '{message.from_user.id}'
    """
    user = select_bd(query)[0][0]

    query2 = f"""
    INSERT INTO `applications_other_applications` (text, date_created, status, id_appl_id, system_id) 
        VALUES
        ('{user_data['–¢–µ–∫—Å—Ç_–ø—Ä–æ–±–ª–µ–º—ã']}', '{datetime.datetime.now()}','{False}','{user}','{user_data['–ò–î_—Å–∏—Å—Ç–µ–º—ã']}');
    """
    insert_bd(query2)
    k=''
    for key,value in user_data.items():
        k = k + key + ' - ' + str(value) +'\n'
    await bot.send_message(os.getenv('GROUP_ID'),k)
    query3 = """
        SELECT id from applications_other_applications order by date_created desc limit 1
    """
    id = select_bd(query3)[0][0]
    await state.finish()
    await message.answer(f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ ‚Ññ{id}! –û–∂–∏–¥–∞–π—Ç–µ', reply_markup=finish)


@dp.message_handler(text='üè¢ –î–æ–±–∞–≤–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')
async def contacts(message:types.Message,state: FSMContext):
    await state.update_data(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ = message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',reply_markup=finish)
    await state.set_state(Form.inn_org)

def check(inn):
    if len(inn)!=10:
        return False
    try:
        inn_int = int(inn)
    except:
        return False
    koaf = [2,4,10,3,5,9,4,6,8]
    proiz = 0
    for key,value in enumerate(inn[:9]):
        proiz = proiz + int(value) * koaf[key]
    if (proiz % 11) % 10 != int(inn[-1]):
        return False
    return True

@dp.message_handler(state=Form.inn_org)
async def contacts(message:types.Message,state: FSMContext):
    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É':
        await state.finish()
        await message.answer('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?', reply_markup=finish)
    else:
        await state.update_data(–ü–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª—å=f'{message.from_user.first_name} {message.from_user.last_name} —Å –∏–¥: {message.from_user.id}')
        if check(message.text) is False:
            await message.answer('–ò–ù–ù –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,–≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
            return
        await state.update_data(–ò–ù–ù_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ =message.text)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ',reply_markup=finish)
        await state.set_state(Form.name_org)

@dp.message_handler(state=Form.name_org)
async def contacts(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É':
        await state.finish()
        await message.answer('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?', reply_markup=finish)
    else:
        await state.update_data(–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏=message.text)
        await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=fin)
        await state.set_state(Form.send_kanal_org)


@dp.message_handler(state=Form.send_kanal_org)
async def contacts(message: types.Message, state: FSMContext):
    id_user_tel = message.from_user.id
    user_data = await state.get_data()
    query = f"""
        SELECT id from applications_applicants where id_user_tel = '{message.from_user.id}'
        """
    user = select_bd(query)[0][0]
    query = f"""
           INSERT INTO `applications_organizations` (name, inn, status, date_created, id_appl_id) 
           VALUES
           ('{user_data['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']}', '{user_data['–ò–ù–ù_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']}','{False}','{datetime.datetime.now()}','{user}');  
       """
    insert_bd(query)

    k=''
    for key,value in user_data.items():
        k = k + key + ' - ' + str(value) +'\n'
    await bot.send_message(os.getenv('GROUP_ID'),k)
    await state.finish()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ', reply_markup=finish)

@dp.message_handler(text='üßëüèª‚Äçüíº –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç')
async def contacts(message:types.Message,state: FSMContext):
    await state.update_data(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ=message.text)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç',reply_markup=finish)
    await state.set_state(Form.inn_org_sotr)

@dp.message_handler(state=Form.inn_org_sotr)
async def contacts(message:types.Message,state: FSMContext):
    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É':
        await state.finish()
        await message.answer('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?', reply_markup=finish)
    else:
        await state.update_data(
        –ü–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª—å=f'{message.from_user.first_name} {message.from_user.last_name} —Å –∏–¥: {message.from_user.id}'
    )
        if len(message.text)!=10:
            await message.answer('–ò–ù–ù –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ,–≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ')
            return
        await state.update_data(–ò–ù–ù_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏=message.text)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò. –û.): ',reply_markup=finish)
        await state.set_state(Form.fio_sotr)

@dp.message_handler(state=Form.fio_sotr)
async def contacts(message:types.Message,state: FSMContext):
    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É':
        await state.finish()
        await message.answer('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?', reply_markup=finish)
    else:
        await state.update_data(–§–ò–û=message.text)
        await message.answer('–£–∫–∞–∂–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (–ø–æ–ª–Ω–æ—Å—Ç—å—é) ',reply_markup=finish)
        await state.set_state(Form.dol_sotr)

@dp.message_handler(state=Form.dol_sotr)
async def contacts(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É':
        await state.finish()
        await message.answer('–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É?', reply_markup=finish)
    else:
        await state.update_data(–î–æ–ª–∂–Ω–æ—Å—Ç—å=message.text)
        await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=fin)
        await state.set_state(Form.send_kanal_sotr)

@dp.message_handler(state=Form.send_kanal_sotr)
async def contacts(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    fio = user_data['–§–ò–û']
    fio = fio.split(' ')
    while len(fio)<3:
        fio.append('')
    first_name,last_name,patronymic = fio[1], fio[0], fio[2]
    inn = user_data['–ò–ù–ù_–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']
    post = user_data['–î–æ–ª–∂–Ω–æ—Å—Ç—å']
    query = f"""
            SELECT id from applications_applicants where id_user_tel = '{message.from_user.id}'
            """
    user = select_bd(query)[0][0]
    query = f"""
               INSERT INTO `applications_contact` (first_name, last_name, patronymic, status, date_created, inn, post, id_appl_id) 
               VALUES
               ('{first_name}', '{last_name}','{patronymic}','{False}','{datetime.datetime.now()}','{inn}','{post}','{user}');  
           """
    insert_bd(query)
    k=''
    for key,value in user_data.items():
        k = k + key + ' - ' + str(value) +'\n'
    await bot.send_message(os.getenv('GROUP_ID'),k)
    await state.finish()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ', reply_markup=finish)
@dp.message_handler(text='üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω—É')
async def contacts(message:types.Message,state: FSMContext):
    await state.update_data(–ù–µ–æ–±—Ö–æ–¥–∏–º–æ=message.text)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –§–ò–û –ø–µ—Ä—Å–æ–Ω—ã (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–∞–º–∏–ª–∏—è –ò. –û.)')
    await state.set_state(Form.fio_pers)

@dp.message_handler(state=Form.fio_pers)
async def contacts(message: types.Message, state: FSMContext):
    await state.update_data(
        –ü–æ–ª—å–∑–æ–≤–µ—Ç–µ–ª—å=f'{message.from_user.first_name} {message.from_user.last_name} —Å –∏–¥: {message.from_user.id}'
    )
    await state.update_data(–§–ò–û=message.text)
    await message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=fin)
    await state.set_state(Form.send_kanal_pers)

@dp.message_handler(state=Form.send_kanal_pers)
async def contacts(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    fio = user_data['–§–ò–û']
    fio = fio.split(' ')
    while len(fio)<3:
        fio.append('')
    first_name,last_name,patronymic = fio[1], fio[0], fio[2]
    query = f"""
                SELECT id from applications_applicants where id_user_tel = '{message.from_user.id}'
                """
    user = select_bd(query)[0][0]
    query = f"""
                   INSERT INTO `applications_person` (first_name, last_name, patronymic, status, date_created,  id_appl_id) 
                   VALUES
                   ('{first_name}', '{last_name}','{patronymic}','{False}','{datetime.datetime.now()}','{user}');  
               """
    insert_bd(query)
    k=''
    for key,value in user_data.items():
        k = k + key + ' - ' + str(value) +'\n'
    await bot.send_message(os.getenv('GROUP_ID'),k)
    await state.finish()
    await message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ',reply_markup=finish)



@dp.message_handler()
async def answer(message: types.message):
    await message.reply('–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏') #—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


'''
#–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–¥ —Å—Ç–∏–∫–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—É
@dp.message_handler(content_types=['sticker','document','photo'])
async def check_sticker(message: types.Message):
    await message.answer(message.sticker.file_id)
    await bot.forward_message(os.getenv('GROUP_ID'),message.from_user.id,message.message_id) #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç
'''

if __name__ == '__main__':
    executor.start_polling(dp)#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞


